{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"badge\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport { withTheme } from \"../../core/theming\";\nimport Badge from \"../Badge\";\nvar badgeSize = 8;\nvar iconSize = 24;\nvar itemSize = 56;\nvar outlineHeight = 32;\n\nvar DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    active = _ref.active,\n    theme = _ref.theme,\n    style = _ref.style,\n    onPress = _ref.onPress,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$badge = _ref.badge,\n    badge = _ref$badge === void 0 ? false : _ref$badge,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var scale = theme.animation.scale;\n  var _React$useState = React.useState(1),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    numOfLines = _React$useState2[0],\n    setNumOfLines = _React$useState2[1];\n  var _React$useRef = React.useRef(new Animated.Value(active ? 1 : 0.5)),\n    animScale = _React$useRef.current;\n  React.useEffect(function () {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n  if (!isV3) {\n    return null;\n  }\n  var handlePressOut = function handlePressOut() {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';\n  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;\n  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  var androidLetterSpacingStyle = Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n  var labelTextStyle = _objectSpread({\n    color: labelColor\n  }, isV3 ? theme.fonts.labelMedium : {});\n  return React.createElement(View, rest, React.createElement(TouchableWithoutFeedback, {\n    onPress: onPress,\n    onPressOut: onPress ? handlePressOut : undefined,\n\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(Animated.View, {\n    style: [styles.outline, !label && styles.roundedOutline, {\n      transform: [label ? {\n        scaleX: animScale\n      } : {\n        scale: animScale\n      }],\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(View, {\n    style: [styles.icon, {\n      top: iconPadding\n    }]\n  }, badge && React.createElement(View, {\n    style: styles.badgeContainer\n  }, typeof badge === 'boolean' ? React.createElement(Badge, {\n    visible: badge,\n    size: badgeSize\n  }) : React.createElement(Badge, {\n    visible: badge != null,\n    size: 2 * badgeSize\n  }, badge)), React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: iconColor\n  })), label ? React.createElement(Text, {\n    variant: \"labelMedium\",\n    selectable: false,\n    numberOfLines: 2,\n    onTextLayout: onTextLayout,\n    style: [styles.label, androidLetterSpacingStyle, labelTextStyle]\n  }, label) : null)));\n};\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\nvar styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center'\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  roundedOutline: {\n    height: itemSize\n  },\n  icon: {\n    position: 'absolute'\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch'\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center'\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2\n  }\n});\nexport default withTheme(DrawerCollapsedItem);","map":{"version":3,"mappings":"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","names":["React","Text","Icon","withTheme","Badge","badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","_ref","icon","label","active","theme","style","onPress","accessibilityLabel","badge","rest","isV3","scale","animation","useState","numOfLines","setNumOfLines","useRef","Animated","Value","animScale","current","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","_ref2","nativeEvent","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","labelTextStyle","color","fonts","labelMedium","View","TouchableWithoutFeedback","onPressOut","undefined","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","visible","size","source","variant","selectable","numberOfLines","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"sources":["DrawerCollapsedItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  Animated,\n  TouchableWithoutFeedback,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n  Platform,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport Badge from '../Badge';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Icon to display for the `DrawerCollapsedItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      icon=\"inbox\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  const labelTextStyle = {\n    color: labelColor,\n    ...(isV3 ? theme.fonts.labelMedium : {}),\n  };\n\n  return (\n    <View {...rest}>\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n          />\n\n          <View style={[styles.icon, { top: iconPadding }]}>\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[styles.label, androidLetterSpacingStyle, labelTextStyle]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"module"}