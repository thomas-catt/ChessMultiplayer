{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'text-input' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _getConstants = getConstants(isV3),\n    INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n    MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n  var _ref4 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var _getOutlinedInputColo = getOutlinedInputColors({\n      activeOutlineColor: activeOutlineColor,\n      customOutlineColor: customOutlineColor,\n      disabled: disabled,\n      error: error,\n      theme: theme\n    }),\n    inputTextColor = _getOutlinedInputColo.inputTextColor,\n    activeColor = _getOutlinedInputColo.activeColor,\n    outlineColor = _getOutlinedInputColo.outlineColor,\n    placeholderColor = _getOutlinedInputColo.placeholderColor,\n    errorColor = _getOutlinedInputColo.errorColor;\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var outlinedHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP : 0);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: testID + \"-outlined\"\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n    activeColor = _ref3.activeColor,\n    backgroundColor = _ref3.backgroundColor,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    focused = _ref3.focused,\n    outlineColor = _ref3.outlineColor,\n    roundness = _ref3.roundness;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline,\n    {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","AdornmentType","AdornmentSide","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","rest","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","_ref2","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","wiggleOffsetX","maxFontSizeMultiplier","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","labelBackground","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input',\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP) : 0);\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: `${testID}-outlined`,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                lineHeight,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.getConstants().isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}