{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport color from 'color';\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n    disabled = _ref.disabled;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  return undefined;\n};\nvar getBackgroundColor = function getBackgroundColor(_ref2) {\n  var theme = _ref2.theme,\n    isMode = _ref2.isMode,\n    disabled = _ref2.disabled,\n    selected = _ref2.selected,\n    customContainerColor = _ref2.customContainerColor;\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n  return undefined;\n};\nvar getIconColor = function getIconColor(_ref3) {\n  var theme = _ref3.theme,\n    isMode = _ref3.isMode,\n    disabled = _ref3.disabled,\n    selected = _ref3.selected,\n    customIconColor = _ref3.customIconColor;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n  return theme.colors.text;\n};\nvar getRippleColor = function getRippleColor(_ref4) {\n  var theme = _ref4.theme,\n    iconColor = _ref4.iconColor;\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\nexport var getIconButtonColor = function getIconButtonColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    mode = _ref5.mode,\n    selected = _ref5.selected,\n    customIconColor = _ref5.customIconColor,\n    customContainerColor = _ref5.customContainerColor;\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n  var baseIconColorProps = {\n    theme: theme,\n    isMode: isMode,\n    disabled: disabled,\n    selected: selected\n  };\n  var iconColor = getIconColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n    customIconColor: customIconColor\n  }));\n  return {\n    iconColor: iconColor,\n    backgroundColor: getBackgroundColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n      customContainerColor: customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme: theme,\n      iconColor: iconColor\n    }),\n    borderColor: getBorderColor({\n      theme: theme,\n      disabled: disabled\n    })\n  };\n};","map":{"version":3,"mappings":"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","names":["color","getBorderColor","_ref","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","_ref2","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","_ref3","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","_ref4","iconColor","alpha","rgb","string","getIconButtonColor","_ref5","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"sources":["utils.ts"],"sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: Theme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: Theme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}