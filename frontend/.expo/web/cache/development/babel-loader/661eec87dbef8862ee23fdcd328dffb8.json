{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { getSelectionControlIOSColor } from \"../Checkbox/utils\";\n\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getSelectionControlI = getSelectionControlIOSColor({\n        theme: theme,\n        disabled: disabled,\n        customColor: rest.color\n      }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\n\nvar RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,SAASC,kBAAT;AACA,SAASC,WAAT,EAAsBC,SAAtB;AACA,OAAOC,qBAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;AAEA,SAASC,2BAAT;;AAiDA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAGC,MAQV;EAAA,IAPXC,QADsB,GAQXD,KAPXC,QADsB;IAEtBC,OAFsB,GAQXF,KANXE,OAFsB;IAGtBC,KAHsB,GAQXH,KALXG,KAHsB;IAItBC,MAJsB,GAQXJ,KAJXI,MAJsB;IAKtBC,KALsB,GAQXL,KAHXK,KALsB;IAMtBC,MANsB,GAQXN,KAFXM,MANsB;IAOnBC,gCACQP;EACX,OACET,oBAACC,kBAAD,CAAoBgB,QAApB,QACIC,iBAAD,EAAsC;IACrC,IAAMC,OAAO,GACXhB,SAAS,CAAC;MACRiB,YAAY,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEJ,KADf;MAERD,MAFQ,EAERA,MAFQ;MAGRC;IAHQ,CAAD,CAAT,KAIO,SALT;IAOA,4BAAsCP,2BAA2B,CAAC;QAChEK,KADgE,EAChEA,KADgE;QAEhEF,QAFgE,EAEhEA,QAFgE;QAGhEW,WAAW,EAAEL,IAAI,CAACM;MAH8C,CAAD,CAAjE;MAAQC,YAAF,yBAAEA,YAAF;MAAgBC;IAMtB,OACExB,oBAACK,eAAD,eACMW,IADN;MAEES,UAAU,MAFZ;MAGED,WAAW,EAAEA,WAHf;MAIEb,OAAO,EACLD,QAAQ,GACJgB,SADI,GAEJ,YAAM;QACJxB,WAAW,CAAC;UACVS,OADU,EACVA,OADU;UAEVG,KAFU,EAEVA,KAFU;UAGVa,aAAa,EAAET,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAES;QAHd,CAAD,CAAX;MAKD,CAbT;MAeEC,iBAAiB,EAAC,OAfpB;MAgBEC,kBAAkB,EAAE;QAAEnB,QAAF,EAAEA,QAAF;QAAYS;MAAZ,CAhBtB;MAiBEW,uBAAuB,EAAC,QAjB1B;MAkBEC,KAAK,EAAEC,MAAM,CAACC,SAlBhB;MAmBElB,MAAM,EAAEA;IAnBV,IAqBEf,oBAACkC,IAAD;MAAMH,KAAK,EAAE;QAAEI,OAAO,EAAEhB,OAAO,GAAG,CAAH,GAAO;MAAzB;IAAb,GACEnB,oBAACI,qBAAD;MACEgC,gBAAgB,EAAE,KADpB;MAEEC,IAAI,EAAC,OAFP;MAGEC,IAAI,EAAE,EAHR;MAIEhB,KAAK,EAAEC,YAJT;MAKEgB,SAAS,EAAC;IALZ,EADF,CArBF,CADF;EAiCD,CAhDH,CADF;AAoDD,CA7DD;AA+DA/B,cAAc,CAACgC,WAAf,GAA6B,iBAA7B;AAEA,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;EAC/BT,SAAS,EAAE;IACTU,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlB,CAAf;AAOA,eAAetC,SAAS,CAACE,cAAD,CAAxB;;AAGA,IAAMqC,uBAAuB,GAAGvC,SAAS,CAACE,cAAD,CAAzC;;AAEA,SAASqC,uBAAuB,IAAIrC,cAApC","names":["React","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","getSelectionControlIOSColor","RadioButtonIOS","_ref","disabled","onPress","theme","status","value","testID","rest","Consumer","context","checked","contextValue","customColor","color","checkedColor","rippleColor","borderless","undefined","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","opacity","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}