{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogIcon from \"./DialogIcon\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\nimport overlay from \"../../styles/overlay\";\nvar DIALOG_ELEVATION = 24;\n\nvar Dialog = function Dialog(_ref) {\n  var children = _ref.children,\n    _ref$dismissable = _ref.dismissable,\n    dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n    onDismiss = _ref.onDismiss,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? false : _ref$visible,\n    style = _ref.style,\n    theme = _ref.theme;\n  var isV3 = theme.isV3,\n    dark = theme.dark,\n    mode = theme.mode,\n    colors = theme.colors,\n    roundness = theme.roundness;\n  var borderRadius = (isV3 ? 7 : 1) * roundness;\n  var backgroundColorV2 = dark && mode === 'adaptive' ? overlay(DIALOG_ELEVATION, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface;\n  var backgroundColor = isV3 ? theme.colors.elevation.level3 : backgroundColorV2;\n  return React.createElement(Modal, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, styles.container, style],\n    theme: theme\n  }, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (isV3) {\n      if (i === 0 && React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          style: [{\n            marginTop: 24\n          }, child.props.style]\n        });\n      }\n    }\n    if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n      return React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n    return child;\n  }));\n};\n\nDialog.Content = DialogContent;\n\nDialog.Actions = DialogActions;\n\nDialog.Title = DialogTitle;\n\nDialog.ScrollArea = DialogScrollArea;\n\nDialog.Icon = DialogIcon;\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"mappings":"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","names":["React","Modal","DialogContent","DialogActions","DialogIcon","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","_ref","children","dismissable","onDismiss","visible","style","theme","isV3","dark","mode","colors","roundness","borderRadius","backgroundColorV2","surface","backgroundColor","elevation","level3","contentContainerStyle","styles","container","Children","toArray","filter","child","map","i","isValidElement","cloneElement","marginTop","props","type","paddingTop","Content","Actions","Title","ScrollArea","Icon","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","justifyContent"],"sources":["Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\nimport DialogIcon from './DialogIcon';\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"small\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => {\n  const { isV3, dark, mode, colors, roundness } = theme;\n\n  const borderRadius = (isV3 ? 7 : 1) * roundness;\n\n  const backgroundColorV2 =\n    dark && mode === 'adaptive'\n      ? overlay(DIALOG_ELEVATION, colors?.surface)\n      : colors?.surface;\n  const backgroundColor = isV3\n    ? theme.colors.elevation.level3\n    : backgroundColorV2;\n\n  return (\n    <Modal\n      dismissable={dismissable}\n      onDismiss={onDismiss}\n      visible={visible}\n      contentContainerStyle={[\n        {\n          borderRadius,\n          backgroundColor,\n        },\n        styles.container,\n        style,\n      ]}\n      theme={theme}\n    >\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (isV3) {\n            if (i === 0 && React.isValidElement(child)) {\n              return React.cloneElement(child, {\n                style: [{ marginTop: 24 }, child.props.style],\n              });\n            }\n          }\n\n          if (\n            i === 0 &&\n            React.isValidElement(child) &&\n            child.type === DialogContent\n          ) {\n            // Dialog content is the first item, so we add a top padding\n            return React.cloneElement(child, {\n              style: [{ paddingTop: 24 }, child.props.style],\n            });\n          }\n\n          return child;\n        })}\n    </Modal>\n  );\n};\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n// @component ./DialogIcon.tsx\nDialog.Icon = DialogIcon;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}