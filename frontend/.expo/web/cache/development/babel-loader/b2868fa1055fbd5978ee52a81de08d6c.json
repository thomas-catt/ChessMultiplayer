{"ast":null,"code":"import color from 'color';\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n    calculatedRippleColor = _ref.calculatedRippleColor,\n    underlayColor = _ref.underlayColor;\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n    rippleColor = _ref2.rippleColor;\n  if (rippleColor) {\n    return rippleColor;\n  }\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\nexport var getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n    rippleColor = _ref3.rippleColor,\n    underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC,MAQnB;EAAA,IAPJC,KADwB,GAQpBD,KAPJC,KADwB;IAExBC,qBAFwB,GAQpBF,KANJE,qBAFwB;IAGxBC,gBAKIH,KALJG;EAMA,IAAIA,aAAa,IAAI,IAArB,EAA2B;IACzB,OAAOA,aAAP;EACD;EAED,IAAIF,KAAK,CAACG,IAAV,EAAgB;IACd,OAAON,KAAK,CAACI,qBAAD,CAAL,CAA6BG,GAA7B,GAAmCC,MAAnC,EAAP;EACD;EAED,OAAOR,KAAK,CAACI,qBAAD,CAAL,CAA6BK,IAA7B,CAAkC,GAAlC,EAAuCF,GAAvC,GAA6CC,MAA7C,EAAP;AACD,CAlBD;AAoBA,IAAME,cAAc,GAAG,SAAjBA,cAAc,CAAGC,OAMjB;EAAA,IALJR,KADsB,GAMlBQ,MALJR,KADsB;IAEtBS,cAIID,MAJJC;EAKA,IAAIA,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACD;EAED,IAAIT,KAAK,CAACG,IAAV,EAAgB;IACd,OAAON,KAAK,CAACG,KAAK,CAACU,MAAN,CAAaC,SAAd,CAAL,CAA8BC,KAA9B,CAAoC,IAApC,EAA0CR,GAA1C,GAAgDC,MAAhD,EAAP;EACD;EAED,IAAIL,KAAK,CAACa,IAAV,EAAgB;IACd,OAAOhB,KAAK,CAACG,KAAK,CAACU,MAAN,CAAaI,IAAd,CAAL,CAAyBF,KAAzB,CAA+B,IAA/B,EAAqCR,GAArC,GAA2CC,MAA3C,EAAP;EACD;EACD,OAAOR,KAAK,CAACG,KAAK,CAACU,MAAN,CAAaI,IAAd,CAAL,CAAyBF,KAAzB,CAA+B,GAA/B,EAAoCR,GAApC,GAA0CC,MAA1C,EAAP;AACD,CAnBD;AAqBA,OAAO,IAAMU,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAGC,OAQlC;EAAA,IAPJhB,KADuC,GAQnCgB,MAPJhB,KADuC;IAEvCS,WAFuC,GAQnCO,MANJP,WAFuC;IAGvCP,gBAKIc,MALJd;EAMA,IAAMD,qBAAqB,GAAGM,cAAc,CAAC;IAAEP,KAAF,EAAEA,KAAF;IAASS;EAAT,CAAD,CAA5C;EACA,OAAO;IACLR,qBADK,EACLA,qBADK;IAELgB,uBAAuB,EAAEnB,gBAAgB,CAAC;MACxCE,KADwC,EACxCA,KADwC;MAExCC,qBAFwC,EAExCA,qBAFwC;MAGxCC;IAHwC,CAAD;EAFpC,CAAP;AAQD,CAlBM","names":["color","getUnderlayColor","_ref","theme","calculatedRippleColor","underlayColor","isV3","rgb","string","fade","getRippleColor","_ref2","rippleColor","colors","onSurface","alpha","dark","text","getTouchableRippleColors","_ref3","calculatedUnderlayColor"],"sources":["utils.ts"],"sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: Theme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}