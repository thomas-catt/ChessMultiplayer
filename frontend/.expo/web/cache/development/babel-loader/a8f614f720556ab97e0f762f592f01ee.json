{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nvar isDark = function isDark(_ref) {\n  var dark = _ref.dark,\n    backgroundColor = _ref.backgroundColor;\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n  return false;\n};\nvar getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {\n  var isMode = _ref2.isMode,\n    theme = _ref2.theme,\n    disabled = _ref2.disabled,\n    customButtonColor = _ref2.customButtonColor;\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n      return theme.colors.surfaceDisabled;\n    }\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    }\n    return theme.colors.primary;\n  }\n  return 'transparent';\n};\nvar getButtonTextColor = function getButtonTextColor(_ref3) {\n  var isMode = _ref3.isMode,\n    theme = _ref3.theme,\n    disabled = _ref3.disabled,\n    customTextColor = _ref3.customTextColor,\n    backgroundColor = _ref3.backgroundColor,\n    dark = _ref3.dark;\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark: dark,\n          backgroundColor: backgroundColor\n        }) ? white : black;\n      }\n    }\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n  if (disabled) {\n    return color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  }\n  if (isMode('contained')) {\n    return isDark({\n      dark: dark,\n      backgroundColor: backgroundColor\n    }) ? white : black;\n  }\n  return theme.colors.primary;\n};\nvar getButtonBorderColor = function getButtonBorderColor(_ref4) {\n  var isMode = _ref4.isMode,\n    disabled = _ref4.disabled,\n    theme = _ref4.theme;\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n  }\n  return 'transparent';\n};\nvar getButtonBorderWidth = function getButtonBorderWidth(_ref5) {\n  var isMode = _ref5.isMode,\n    theme = _ref5.theme;\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n  return 0;\n};\nexport var getButtonColors = function getButtonColors(_ref6) {\n  var theme = _ref6.theme,\n    mode = _ref6.mode,\n    customButtonColor = _ref6.customButtonColor,\n    customTextColor = _ref6.customTextColor,\n    disabled = _ref6.disabled,\n    dark = _ref6.dark;\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n  var backgroundColor = getButtonBackgroundColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customButtonColor: customButtonColor\n  });\n  var textColor = getButtonTextColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customTextColor: customTextColor,\n    backgroundColor: backgroundColor,\n    dark: dark\n  });\n  var borderColor = getButtonBorderColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getButtonBorderWidth({\n    isMode: isMode,\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"mappings":"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","names":["color","black","white","isDark","_ref","dark","backgroundColor","isLight","getButtonBackgroundColor","_ref2","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","alpha","rgb","string","getButtonTextColor","_ref3","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","_ref4","outline","getButtonBorderWidth","_ref5","StyleSheet","hairlineWidth","getButtonColors","_ref6","mode","modeToCompare","textColor","borderColor","borderWidth"],"sources":["utils.tsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: Theme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: Theme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}