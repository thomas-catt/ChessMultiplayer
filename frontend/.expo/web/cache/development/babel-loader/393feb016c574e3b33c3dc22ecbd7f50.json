{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nvar DEFAULT_PADDING = 9;\nexport var getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\nexport var getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var _buttons$index, _buttons;\n  var theme = _ref2.theme,\n    index = _ref2.index,\n    buttons = _ref2.buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n  return {};\n};\nexport var getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n    theme = _ref3.theme;\n  if (segment === 'first') {\n    return _objectSpread({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return _objectSpread({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n    theme = _ref4.theme;\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    checked = _ref5.checked;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n  return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n};\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n  if (theme.isV3) {\n    return 1;\n  }\n  return StyleSheet.hairlineWidth;\n};\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n    disabled = _ref7.disabled;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\nexport var getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n    disabled = _ref8.disabled,\n    checked = _ref8.checked;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"mappings":"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","names":["color","black","white","DEFAULT_PADDING","getSegmentedButtonDensityPadding","_ref","density","padding","getDisabledSegmentedButtonStyle","_ref2","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","_buttons$index","disabled","isNextDisabled","_buttons","borderRightWidth","getSegmentedButtonBorderRadius","_ref3","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","_ref4","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","_ref5","surfaceDisabled","outline","dark","_ref6","StyleSheet","hairlineWidth","getSegmentedButtonTextColor","_ref7","onSurfaceDisabled","onSurface","getSegmentedButtonColors","_ref8","backgroundColor","borderColor","textColor","borderWidth"],"sources":["utils.ts"],"sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: Theme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: Theme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]},"metadata":{},"sourceType":"module"}