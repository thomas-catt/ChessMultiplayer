{"ast":null,"code":"import color from 'color';\nimport { MD3Colors, tokens, typescale } from \"./tokens\";\nvar _tokens$md$ref = tokens.md.ref,\n  palette = _tokens$md$ref.palette,\n  opacity = _tokens$md$ref.opacity;\nexport var MD3LightTheme = {\n  dark: false,\n  roundness: 4,\n  version: 3,\n  isV3: true,\n  colors: {\n    primary: palette.primary40,\n    primaryContainer: palette.primary90,\n    secondary: palette.secondary40,\n    secondaryContainer: palette.secondary90,\n    tertiary: palette.tertiary40,\n    tertiaryContainer: palette.tertiary90,\n    surface: palette.neutral99,\n    surfaceVariant: palette.neutralVariant90,\n    surfaceDisabled: color(palette.neutral10).alpha(opacity.level2).rgb().string(),\n    background: palette.neutral99,\n    error: palette.error40,\n    errorContainer: palette.error90,\n    onPrimary: palette.primary100,\n    onPrimaryContainer: palette.primary10,\n    onSecondary: palette.secondary100,\n    onSecondaryContainer: palette.secondary10,\n    onTertiary: palette.tertiary100,\n    onTertiaryContainer: palette.tertiary10,\n    onSurface: palette.neutral10,\n    onSurfaceVariant: palette.neutralVariant30,\n    onSurfaceDisabled: color(palette.neutral10).alpha(opacity.level4).rgb().string(),\n    onError: palette.error100,\n    onErrorContainer: palette.error10,\n    onBackground: palette.neutral10,\n    outline: palette.neutralVariant50,\n    inverseSurface: palette.neutral20,\n    inverseOnSurface: palette.neutral95,\n    inversePrimary: palette.primary80,\n    backdrop: color(MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),\n    elevation: {\n      level0: 'transparent',\n      level1: 'rgb(247, 243, 249)',\n      level2: 'rgb(243, 237, 246)',\n      level3: 'rgb(238, 232, 244)',\n      level4: 'rgb(236, 230, 243)',\n      level5: 'rgb(233, 227, 241)'\n    }\n  },\n\n  fonts: typescale,\n  animation: {\n    scale: 1.0\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B;AAEA,qBAA6BD,MAAM,CAACE,EAAP,CAAUC,GAAvC;EAAQC,OAAF,kBAAEA,OAAF;EAAWC;AAEjB,OAAO,IAAMC,aAAuB,GAAG;EACrCC,IAAI,EAAE,KAD+B;EAErCC,SAAS,EAAE,CAF0B;EAGrCC,OAAO,EAAE,CAH4B;EAIrCC,IAAI,EAAE,IAJ+B;EAKrCC,MAAM,EAAE;IACNC,OAAO,EAAER,OAAO,CAACS,SADX;IAENC,gBAAgB,EAAEV,OAAO,CAACW,SAFpB;IAGNC,SAAS,EAAEZ,OAAO,CAACa,WAHb;IAINC,kBAAkB,EAAEd,OAAO,CAACe,WAJtB;IAKNC,QAAQ,EAAEhB,OAAO,CAACiB,UALZ;IAMNC,iBAAiB,EAAElB,OAAO,CAACmB,UANrB;IAONC,OAAO,EAAEpB,OAAO,CAACqB,SAPX;IAQNC,cAAc,EAAEtB,OAAO,CAACuB,gBARlB;IASNC,eAAe,EAAE9B,KAAK,CAACM,OAAO,CAACyB,SAAT,CAAL,CACdC,KADc,CACRzB,OAAO,CAAC0B,MADA,EAEdC,GAFc,GAGdC,MAHc,EATX;IAaNC,UAAU,EAAE9B,OAAO,CAACqB,SAbd;IAcNU,KAAK,EAAE/B,OAAO,CAACgC,OAdT;IAeNC,cAAc,EAAEjC,OAAO,CAACkC,OAflB;IAgBNC,SAAS,EAAEnC,OAAO,CAACoC,UAhBb;IAiBNC,kBAAkB,EAAErC,OAAO,CAACsC,SAjBtB;IAkBNC,WAAW,EAAEvC,OAAO,CAACwC,YAlBf;IAmBNC,oBAAoB,EAAEzC,OAAO,CAAC0C,WAnBxB;IAoBNC,UAAU,EAAE3C,OAAO,CAAC4C,WApBd;IAqBNC,mBAAmB,EAAE7C,OAAO,CAAC8C,UArBvB;IAsBNC,SAAS,EAAE/C,OAAO,CAACyB,SAtBb;IAuBNuB,gBAAgB,EAAEhD,OAAO,CAACiD,gBAvBpB;IAwBNC,iBAAiB,EAAExD,KAAK,CAACM,OAAO,CAACyB,SAAT,CAAL,CAChBC,KADgB,CACVzB,OAAO,CAACkD,MADE,EAEhBvB,GAFgB,GAGhBC,MAHgB,EAxBb;IA4BNuB,OAAO,EAAEpD,OAAO,CAACqD,QA5BX;IA6BNC,gBAAgB,EAAEtD,OAAO,CAACuD,OA7BpB;IA8BNC,YAAY,EAAExD,OAAO,CAACyB,SA9BhB;IA+BNgC,OAAO,EAAEzD,OAAO,CAAC0D,gBA/BX;IAgCNC,cAAc,EAAE3D,OAAO,CAAC4D,SAhClB;IAiCNC,gBAAgB,EAAE7D,OAAO,CAAC8D,SAjCpB;IAkCNC,cAAc,EAAE/D,OAAO,CAACgE,SAlClB;IAmCNC,QAAQ,EAAEvE,KAAK,CAACC,SAAS,CAACuE,gBAAX,CAAL,CAAkCxC,KAAlC,CAAwC,GAAxC,EAA6CE,GAA7C,GAAmDC,MAAnD,EAnCJ;IAoCNsC,SAAS,EAAE;MACTC,MAAM,EAAE,aADC;MAKTC,MAAM,EAAE,oBALC;MAMT1C,MAAM,EAAE,oBANC;MAOT2C,MAAM,EAAE,oBAPC;MAQTnB,MAAM,EAAE,oBARC;MASToB,MAAM,EAAE;IATC;EApCL,CAL6B;;EAqDrCC,KAAK,EAAE3E,SArD8B;EAsDrC4E,SAAS,EAAE;IACTC,KAAK,EAAE;EADE;AAtD0B,CAAhC","names":["color","MD3Colors","tokens","typescale","md","ref","palette","opacity","MD3LightTheme","dark","roundness","version","isV3","colors","primary","primary40","primaryContainer","primary90","secondary","secondary40","secondaryContainer","secondary90","tertiary","tertiary40","tertiaryContainer","tertiary90","surface","neutral99","surfaceVariant","neutralVariant90","surfaceDisabled","neutral10","alpha","level2","rgb","string","background","error","error40","errorContainer","error90","onPrimary","primary100","onPrimaryContainer","primary10","onSecondary","secondary100","onSecondaryContainer","secondary10","onTertiary","tertiary100","onTertiaryContainer","tertiary10","onSurface","onSurfaceVariant","neutralVariant30","onSurfaceDisabled","level4","onError","error100","onErrorContainer","error10","onBackground","outline","neutralVariant50","inverseSurface","neutral20","inverseOnSurface","neutral95","inversePrimary","primary80","backdrop","neutralVariant20","elevation","level0","level1","level3","level5","fonts","animation","scale"],"sources":["LightTheme.tsx"],"sourcesContent":["import color from 'color';\nimport type { MD3Theme } from '../../../types';\nimport { MD3Colors, tokens, typescale } from './tokens';\n\nconst { palette, opacity } = tokens.md.ref;\n\nexport const MD3LightTheme: MD3Theme = {\n  dark: false,\n  roundness: 4,\n  version: 3,\n  isV3: true,\n  colors: {\n    primary: palette.primary40,\n    primaryContainer: palette.primary90,\n    secondary: palette.secondary40,\n    secondaryContainer: palette.secondary90,\n    tertiary: palette.tertiary40,\n    tertiaryContainer: palette.tertiary90,\n    surface: palette.neutral99,\n    surfaceVariant: palette.neutralVariant90,\n    surfaceDisabled: color(palette.neutral10)\n      .alpha(opacity.level2)\n      .rgb()\n      .string(),\n    background: palette.neutral99,\n    error: palette.error40,\n    errorContainer: palette.error90,\n    onPrimary: palette.primary100,\n    onPrimaryContainer: palette.primary10,\n    onSecondary: palette.secondary100,\n    onSecondaryContainer: palette.secondary10,\n    onTertiary: palette.tertiary100,\n    onTertiaryContainer: palette.tertiary10,\n    onSurface: palette.neutral10,\n    onSurfaceVariant: palette.neutralVariant30,\n    onSurfaceDisabled: color(palette.neutral10)\n      .alpha(opacity.level4)\n      .rgb()\n      .string(),\n    onError: palette.error100,\n    onErrorContainer: palette.error10,\n    onBackground: palette.neutral10,\n    outline: palette.neutralVariant50,\n    inverseSurface: palette.neutral20,\n    inverseOnSurface: palette.neutral95,\n    inversePrimary: palette.primary80,\n    backdrop: color(MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),\n    elevation: {\n      level0: 'transparent',\n      // Note: Color values with transparency cause RN to transfer shadows to children nodes\n      // instead of View component in Surface. Providing solid background fixes the issue.\n      // Opaque color values generated with `palette.primary99` used as background\n      level1: 'rgb(247, 243, 249)', // palette.primary40, alpha 0.05\n      level2: 'rgb(243, 237, 246)', // palette.primary40, alpha 0.08\n      level3: 'rgb(238, 232, 244)', // palette.primary40, alpha 0.11\n      level4: 'rgb(236, 230, 243)', // palette.primary40, alpha 0.12\n      level5: 'rgb(233, 227, 241)', // palette.primary40, alpha 0.14\n    },\n  },\n  fonts: typescale,\n  animation: {\n    scale: 1.0,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}