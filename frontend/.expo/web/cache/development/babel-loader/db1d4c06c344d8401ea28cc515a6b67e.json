{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"elevation\", \"style\", \"theme\", \"value\", \"loading\", \"testID\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport IconButton from \"./IconButton/IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport ActivityIndicator from \"./ActivityIndicator\";\n\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _theme$colors;\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n    clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n    clearIcon = _ref.clearIcon,\n    icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    inputStyle = _ref.inputStyle,\n    onIconPress = _ref.onIconPress,\n    placeholder = _ref.placeholder,\n    _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n    searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n    _ref$elevation = _ref.elevation,\n    elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    style = _ref.style,\n    theme = _ref.theme,\n    value = _ref.value,\n    _ref$loading = _ref.loading,\n    loading = _ref$loading === void 0 ? false : _ref$loading,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'search-bar' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n  var handleClearPress = function handleClearPress() {\n    var _root$current, _rest$onChangeText;\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness,\n    dark = theme.dark,\n    isV3 = theme.isV3;\n  var textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n  var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness\n    }, !isV3 && styles.elevation, styles.container, style]\n  }, theme.isV3 && {\n    elevation: elevation\n  }), React.createElement(IconButton, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    iconColor: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n        color = _ref2.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(TextInput, _extends({\n    style: [styles.input, _objectSpread(_objectSpread({\n      color: textColor\n    }, !isV3 && theme.fonts.regular), Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.placeholder,\n    selectionColor: colors === null || colors === void 0 ? void 0 : colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value,\n    testID: testID\n  }, rest)), loading ? React.createElement(ActivityIndicator, {\n    testID: \"activity-indicator\",\n    style: styles.loader\n  }) :\n  React.createElement(View, {\n    pointerEvents: value ? 'auto' : 'none',\n    testID: testID + \"-icon-wrapper\"\n  }, React.createElement(IconButton, {\n    borderless: true,\n    accessibilityLabel: clearAccessibilityLabel,\n    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n        color = _ref3.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityRole: \"button\"\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0\n  },\n  elevation: {\n    elevation: 4\n  },\n  loader: {\n    margin: 10\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"mappings":"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","names":["React","color","IconButton","Surface","withTheme","MaterialCommunityIcon","ActivityIndicator","Searchbar","forwardRef","ref","clearAccessibilityLabel","clearIcon","_ref","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","elevation","style","theme","value","loading","testID","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","isV3","textColor","onSurface","text","alpha","rgb","string","rippleColor","borderRadius","styles","container","accessibilityRole","borderless","onPress","size","_ref2","name","direction","I18nManager","getConstants","isRTL","accessibilityLabel","TextInput","fonts","regular","Platform","select","web","outline","placeholderTextColor","_theme$colors","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","loader","View","pointerEvents","_ref3","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","margin"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n  Animated,\n  View,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton/IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme } from '../types';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport ActivityIndicator from './ActivityIndicator';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      loading = false,\n      testID = 'search-bar',\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(!isV3 && theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          testID={testID}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={styles.loader}\n          />\n        ) : (\n          // Clear icon should be always rendered within Searchbar – it's transparent,\n          // without touch events, when there is no value. It's done to avoid issues\n          // with the abruptly stopping ripple effect and changing bar width on web,\n          // when clearing the value.\n          <View\n            pointerEvents={value ? 'auto' : 'none'}\n            testID={`${testID}-icon-wrapper`}\n          >\n            <IconButton\n              borderless\n              accessibilityLabel={clearAccessibilityLabel}\n              iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n              rippleColor={rippleColor}\n              onPress={handleClearPress}\n              icon={\n                clearIcon ||\n                (({ size, color }) => (\n                  <MaterialCommunityIcon\n                    name=\"close\"\n                    color={color}\n                    size={size}\n                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                  />\n                ))\n              }\n              accessibilityRole=\"button\"\n            />\n          </View>\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}