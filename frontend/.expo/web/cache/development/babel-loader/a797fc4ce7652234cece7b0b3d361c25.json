{"ast":null,"code":"import React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport overlay from \"../../styles/overlay\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nexport var getAppbarColor = function getAppbarColor(theme, elevation, customBackground, elevated) {\n  var isV3 = theme.isV3,\n    isDarkTheme = theme.dark,\n    mode = theme.mode,\n    colors = theme.colors;\n  var isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors === null || colors === void 0 ? void 0 : colors.surface);\n    }\n    return colors.primary;\n  }\n  if (elevated) {\n    return color(colors.surface).mix(color(colors.primary), 0.08).rgb().string();\n  }\n  return colors.surface;\n};\nexport var DEFAULT_APPBAR_HEIGHT = 56;\nvar MD3_DEFAULT_APPBAR_HEIGHT = 64;\nexport var modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT\n};\nexport var modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge'\n};\nexport var renderAppbarContent = function renderAppbarContent(_ref) {\n  var children = _ref.children,\n    isDark = _ref.isDark,\n    _ref$shouldCenterCont = _ref.shouldCenterContent,\n    shouldCenterContent = _ref$shouldCenterCont === void 0 ? false : _ref$shouldCenterCont,\n    isV3 = _ref.isV3,\n    renderOnly = _ref.renderOnly,\n    renderExcept = _ref.renderExcept,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'small' : _ref$mode;\n  return React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).filter(function (child) {\n    return (\n      renderExcept ? !renderExcept.includes(child.type) : child\n    );\n  }).filter(function (child) {\n    return renderOnly ? renderOnly.includes(child.type) : child;\n  }).map(function (child, i) {\n    if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n    child.type)) {\n      return child;\n    }\n    var props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isV3 ? undefined : isDark ? white : black\n    };\n    if (child.type === AppbarContent) {\n      props.mode = mode;\n      props.style = [isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing, shouldCenterContent && styles.centerAlignedContent, child.props.style];\n    }\n    return React.cloneElement(child, props);\n  });\n};\nvar styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center'\n  },\n  v2Spacing: {\n    marginLeft: 8\n  },\n  v3Spacing: {\n    marginLeft: 12\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAGA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,OAAP;AAEA,SAASC,KAAT,EAAgBC,KAAhB;AAIA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CACzBC,KAD4B,EAE5BC,SAF4B,EAG5BC,gBAH4B,EAI5BC,QAJ4B,EAKzB;EACH,IAAQC,IAAF,GAA4CJ,KAAlD,CAAQI,IAAF;IAAcC,WAAd,GAA4CL,KAAlD,CAAcM,IAAI;IAAeC,IAA3B,GAA4CP,KAAlD,CAAiCO,IAA3B;IAAiCC,SAAWR,KAAlD,CAAuCQ;EACvC,IAAMC,cAAc,GAAGF,IAAI,KAAK,UAAhC;EACA,IAAIL,gBAAJ,EAAsB;IACpB,OAAOA,gBAAP;EACD;EAED,IAAI,CAACE,IAAL,EAAW;IACT,IAAIC,WAAW,IAAII,cAAnB,EAAmC;MACjC,OAAOb,OAAO,CAACK,SAAD,EAAYO,MAAZ,aAAYA,MAAZ,uBAAYA,MAAM,CAAEE,OAApB,CAAd;IACD;IAED,OAAOF,MAAM,CAACG,OAAd;EACD;EAED,IAAIR,QAAJ,EAAc;IACZ,OAAOX,KAAK,CAACgB,MAAM,CAACE,OAAR,CAAL,CACJE,GADI,CACApB,KAAK,CAACgB,MAAM,CAACG,OAAR,CADL,EACuB,IADvB,EAEJE,GAFI,GAGJC,MAHI,EAAP;EAID;EAED,OAAON,MAAM,CAACE,OAAd;AACD,CA5BM;AAwCP,OAAO,IAAMK,qBAAqB,GAAG,EAA9B;AACP,IAAMC,yBAAyB,GAAG,EAAlC;AAEA,OAAO,IAAMC,gBAAgB,GAAG;EAC9BC,KAAK,EAAEF,yBADuB;EAE9BG,MAAM,EAAE,GAFsB;EAG9BC,KAAK,EAAE,GAHuB;EAI9B,kBAAkBJ;AAJY,CAAzB;AAOP,OAAO,IAAMK,eAAe,GAAG;EAC7BH,KAAK,EAAE,YADsB;EAE7BC,MAAM,EAAE,eAFqB;EAG7BC,KAAK,EAAE,gBAHsB;EAI7B,kBAAkB;AAJW,CAAxB;AAOP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAGC,MAQH;EAAA,IAP9BC,QADkC,GAQJD,KAP9BC,QADkC;IAElCC,MAFkC,GAQJF,KAN9BE,MAFkC;IAAA,wBAQJF,KAL9BG,mBAAmB;IAAnBA,mBAAmB,sCAAG,KAHY;IAIlCtB,IAJkC,GAQJmB,KAJ9BnB,IAJkC;IAKlCuB,UALkC,GAQJJ,KAH9BI,UALkC;IAMlCC,YANkC,GAQJL,KAF9BK,YANkC;IAAA,YAQJL,KAD9BhB,IAAI;IAAJA,IAAI,0BAAG;EAEP,OACEhB,KAAK,CAACsC,QAAN,CAAeC,OAAf,CAAuBN,QAAvB,EACGO,MADH,CACWC,eAAD;IAAA,OAAWA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SADvD;EAAA,GAEGD,MAFH,CAEWC,eAAD;IAAA;MAENJ,YAAY,GAAG,CAACA,YAAY,CAACK,QAAb,CAAsBD,KAAK,CAACE,IAA5B,CAAJ,GAAwCF;IAJxD;EAAA,GAOGD,MAPH,CAOWC,eAAD;IAAA,OAAYL,UAAU,GAAGA,UAAU,CAACM,QAAX,CAAoBD,KAAK,CAACE,IAA1B,CAAH,GAAqCF,KAPrE;EAAA,GAQGG,GARH,CAQO,UAACH,KAAD,EAAQI,CAAR,EAAc;IACjB,IACE,CAAC7C,KAAK,CAAC8C,cAAN,CAAqBL,KAArB,CAAD,IACA,CAAC,CAACvC,aAAD,EAAgBC,YAAhB,EAA8BC,gBAA9B,EAAgDsC,QAAhD;IAECD,KAAK,CAACE,IAFP,CAFH,EAME;MACA,OAAOF,KAAP;IACD;IAED,IAAMM,KAIL,GAAG;MACF9C,KAAK,EACH,OAAOwC,KAAK,CAACM,KAAN,CAAY9C,KAAnB,KAA6B,WAA7B,GACIwC,KAAK,CAACM,KAAN,CAAY9C,KADhB,GAEIY,IAAI,GACJmC,SADI,GAEJd,MAAM,GACN3B,KADM,GAEND;IARJ,CAJJ;IAeA,IAAImC,KAAK,CAACE,IAAN,KAAezC,aAAnB,EAAkC;MAChC6C,KAAK,CAAC/B,IAAN,GAAaA,IAAb;MACA+B,KAAK,CAACE,KAAN,GAAc,CACZpC,IAAI,GACAgC,CAAC,KAAK,CAAN,IAAW,CAACV,mBAAZ,IAAmCe,MAAM,CAACC,SAD1C,GAEAN,CAAC,KAAK,CAAN,IAAWK,MAAM,CAACE,SAHV,EAIZjB,mBAAmB,IAAIe,MAAM,CAACG,oBAJlB,EAKZZ,KAAK,CAACM,KAAN,CAAYE,KALA,CAAd;IAOD;IACD,OAAOjD,KAAK,CAACsD,YAAN,CAAmBb,KAAnB,EAA0BM,KAA1B,CAAP;EACD,CA7CH,CADF;AAgDD,CAzDM;AA2DP,IAAMG,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;EAC/BH,oBAAoB,EAAE;IACpBI,UAAU,EAAE;EADQ,CADS;EAI/BL,SAAS,EAAE;IACTM,UAAU,EAAE;EADH,CAJoB;EAO/BP,SAAS,EAAE;IACTO,UAAU,EAAE;EADH;AAPoB,CAAlB,CAAf","names":["React","color","AppbarContent","AppbarAction","AppbarBackAction","overlay","black","white","getAppbarColor","theme","elevation","customBackground","elevated","isV3","isDarkTheme","dark","mode","colors","isAdaptiveMode","surface","primary","mix","rgb","string","DEFAULT_APPBAR_HEIGHT","MD3_DEFAULT_APPBAR_HEIGHT","modeAppbarHeight","small","medium","large","modeTextVariant","renderAppbarContent","_ref","children","isDark","shouldCenterContent","renderOnly","renderExcept","Children","toArray","filter","child","includes","type","map","i","isValidElement","props","undefined","style","styles","v3Spacing","v2Spacing","centerAlignedContent","cloneElement","StyleSheet","create","alignItems","marginLeft"],"sources":["utils.ts"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { StyleSheet } from 'react-native';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nexport const getAppbarColor = (\n  theme: Theme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return color(colors.surface)\n      .mix(color(colors.primary), 0.08)\n      .rgb()\n      .string();\n  }\n\n  return colors.surface;\n};\n\ntype RenderAppbarContentProps = {\n  children: React.ReactNode;\n  isDark: boolean;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: React.ReactNode[];\n  renderExcept?: React.ReactNode[];\n  mode?: AppbarModes;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n};\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n}: RenderAppbarContentProps) => {\n  return (\n    React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        renderExcept ? !renderExcept.includes(child.type) : child\n      )\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      .filter((child) => (renderOnly ? renderOnly.includes(child.type) : child))\n      .map((child, i) => {\n        if (\n          !React.isValidElement(child) ||\n          ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n            // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n            child.type\n          )\n        ) {\n          return child;\n        }\n\n        const props: {\n          color?: string;\n          style?: StyleProp<ViewStyle>;\n          mode?: AppbarModes;\n        } = {\n          color:\n            typeof child.props.color !== 'undefined'\n              ? child.props.color\n              : isV3\n              ? undefined\n              : isDark\n              ? white\n              : black,\n        };\n\n        if (child.type === AppbarContent) {\n          props.mode = mode;\n          props.style = [\n            isV3\n              ? i === 0 && !shouldCenterContent && styles.v3Spacing\n              : i !== 0 && styles.v2Spacing,\n            shouldCenterContent && styles.centerAlignedContent,\n            child.props.style,\n          ];\n        }\n        return React.cloneElement(child, props);\n      })\n  );\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}