{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\", \"isLeading\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from \"../../styles/themes/v2/colors\";\nimport IconButton from \"../IconButton/IconButton\";\nimport { useTheme } from \"../../core/theming\";\n\nvar AppbarAction = function AppbarAction(_ref) {\n  var _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    iconColor = _ref.color,\n    icon = _ref.icon,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    accessibilityLabel = _ref.accessibilityLabel,\n    isLeading = _ref.isLeading,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useTheme();\n  var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : color(black).alpha(0.54).rgb().string();\n  return React.createElement(IconButton, _extends({\n    size: size,\n    onPress: onPress,\n    iconColor: actionIconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true\n  }, rest));\n};\nAppbarAction.displayName = 'Appbar.Action';\nexport default AppbarAction;\n\nexport { AppbarAction };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAMA,SAASC,KAAT;AACA,OAAOC,UAAP;AAEA,SAASC,QAAT;;AA8DA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAGC,MASR;EAAA,qBARXC,IAAI;IAAJA,IAAI,0BAAG,EADa;IAEbC,SAFa,GASTF,KAPXL,KAAK;IACLQ,IAHoB,GASTH,KANXG,IAHoB;IAIpBC,QAJoB,GASTJ,KALXI,QAJoB;IAKpBC,OALoB,GASTL,KAJXK,OALoB;IAMpBC,kBANoB,GASTN,KAHXM,kBANoB;IAOpBC,SAPoB,GASTP,KAFXO,SAPoB;IAQjBC,gCACQR;EACX,IAAMS,KAAK,GAAGX,QAAQ,EAAtB;EAEA,IAAMY,eAAe,GAAGR,SAAS,GAC7BA,SAD6B,GAE7BO,KAAK,CAACE,IAAN,GACAJ,SAAS,GACPE,KAAK,CAACG,MAAN,CAAaC,SADN,GAEPJ,KAAK,CAACG,MAAN,CAAaE,gBAHf,GAIAnB,KAAK,CAACC,KAAD,CAAL,CAAamB,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EANJ;EAQA,OACEvB,oBAACG,UAAD;IACEI,IAAI,EAAEA,IADR;IAEEI,OAAO,EAAEA,OAFX;IAGEH,SAAS,EAAEQ,eAHb;IAIEP,IAAI,EAAEA,IAJR;IAKEC,QAAQ,EAAEA,QALZ;IAMEE,kBAAkB,EAAEA,kBANtB;IAOEY,QAAQ;EAPV,GAQMV,IARN,EADF;AAYD,CAhCD;AAkCAT,YAAY,CAACoB,WAAb,GAA2B,eAA3B;AAEA,eAAepB,YAAf;;AAGA,SAASA,YAAT","names":["React","color","black","IconButton","useTheme","AppbarAction","_ref","size","iconColor","icon","disabled","onPress","accessibilityLabel","isLeading","rest","theme","actionIconColor","isV3","colors","onSurface","onSurfaceVariant","alpha","rgb","string","animated","displayName"],"sources":["AppbarAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport type {\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { black } from '../../styles/themes/v2/colors';\nimport IconButton from '../IconButton/IconButton';\nimport type { IconSource } from '../Icon';\nimport { useTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar-action-android.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = ({\n  size = 24,\n  color: iconColor,\n  icon,\n  disabled,\n  onPress,\n  accessibilityLabel,\n  isLeading,\n  ...rest\n}: Props) => {\n  const theme = useTheme();\n\n  const actionIconColor = iconColor\n    ? iconColor\n    : theme.isV3\n    ? isLeading\n      ? theme.colors.onSurface\n      : theme.colors.onSurfaceVariant\n    : color(black).alpha(0.54).rgb().string();\n\n  return (\n    <IconButton\n      size={size}\n      onPress={onPress}\n      iconColor={actionIconColor}\n      icon={icon}\n      disabled={disabled}\n      accessibilityLabel={accessibilityLabel}\n      animated\n      {...rest}\n    />\n  );\n};\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]},"metadata":{},"sourceType":"module"}