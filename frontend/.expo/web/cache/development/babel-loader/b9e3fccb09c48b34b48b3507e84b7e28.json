{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Text, TextInput } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport { useContext, useState } from 'react';\nimport { AppContext } from \"../scripts/AppContext\";\nimport { broadcastTextMessage } from \"../scripts/Socket\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Home() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    messageText = _useState2[0],\n    setMessageText = _useState2[1];\n  var appContext = useContext(AppContext);\n  onUsersCountReceive(function (newUsersCount) {\n    appContext.setUsersCount(newUsersCount);\n  });\n  return _jsx(View, {\n    children: _jsx(TextInput, {\n      style: {\n        margin: 10\n      },\n      value: messageText,\n      label: \"Enter Message to broadcast!\",\n      onChangeText: setMessageText,\n      onSubmitEditing: function onSubmitEditing() {\n        return broadcastTextMessage(messageText);\n      }\n    })\n  });\n}","map":{"version":3,"names":["Text","TextInput","useContext","useState","AppContext","broadcastTextMessage","Home","messageText","setMessageText","appContext","onUsersCountReceive","newUsersCount","setUsersCount","margin"],"sources":["E:/_Data/ThomasCattGithub/ChessMultiplayer/frontend/assets/views/Messaging.js"],"sourcesContent":["import { Text, TextInput } from 'react-native-paper';\r\nimport { View } from 'react-native';\r\nimport { useContext, useState } from 'react';\r\nimport { AppContext } from '../scripts/AppContext'\r\nimport { broadcastTextMessage } from '../scripts/Socket'\r\n\r\nexport default function Home() {\r\n    const [messageText, setMessageText] = useState(\"\")\r\n    \r\n\tconst appContext = useContext(AppContext)\r\n\tonUsersCountReceive((newUsersCount) => {\r\n\t\tappContext.setUsersCount(newUsersCount)\r\n\t})\r\n\r\n    return <View>\r\n        <TextInput style={{\r\n            margin: 10,\r\n        }} value={messageText} label={\"Enter Message to broadcast!\"} onChangeText={setMessageText} onSubmitEditing={() => broadcastTextMessage(messageText)}/>\r\n    </View>\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAErD,SAASC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,SAASC,UAAU;AACnB,SAASC,oBAAoB;AAA2B;AAExD,eAAe,SAASC,IAAI,GAAG;EAC3B,gBAAsCH,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CI,WAAW;IAAEC,cAAc;EAErC,IAAMC,UAAU,GAAGP,UAAU,CAACE,UAAU,CAAC;EACzCM,mBAAmB,CAAC,UAACC,aAAa,EAAK;IACtCF,UAAU,CAACG,aAAa,CAACD,aAAa,CAAC;EACxC,CAAC,CAAC;EAEC,OAAO,KAAC,IAAI;IAAA,UACR,KAAC,SAAS;MAAC,KAAK,EAAE;QACdE,MAAM,EAAE;MACZ,CAAE;MAAC,KAAK,EAAEN,WAAY;MAAC,KAAK,EAAE,6BAA8B;MAAC,YAAY,EAAEC,cAAe;MAAC,eAAe,EAAE;QAAA,OAAMH,oBAAoB,CAACE,WAAW,CAAC;MAAA;IAAC;EAAE,EACnJ;AACX"},"metadata":{},"sourceType":"module"}