{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"],\n  _excluded2 = [\"elevation\", \"children\", \"theme\", \"style\", \"testID\"],\n  _excluded3 = [\"position\", \"alignSelf\", \"top\", \"left\", \"right\", \"bottom\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport shadow from \"../styles/shadow\";\nimport { useTheme } from \"../core/theming\";\nimport overlay, { isAnimatedValue } from \"../styles/overlay\";\nvar MD2Surface = function MD2Surface(_ref) {\n  var style = _ref.style,\n    overrideTheme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _ref3 = StyleSheet.flatten(style) || {},\n    _ref3$elevation = _ref3.elevation,\n    elevation = _ref3$elevation === void 0 ? 4 : _ref3$elevation;\n  var _useTheme = useTheme(overrideTheme),\n    isDarkTheme = _useTheme.dark,\n    mode = _useTheme.mode,\n    colors = _useTheme.colors;\n  return React.createElement(Animated.View, _extends({}, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface\n    }, elevation ? shadow(elevation) : null, style]\n  }));\n};\n\nvar Surface = function Surface(_ref2) {\n  var _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? 1 : _ref2$elevation,\n    children = _ref2.children,\n    overridenTheme = _ref2.theme,\n    style = _ref2.style,\n    testID = _ref2.testID,\n    props = _objectWithoutProperties(_ref2, _excluded2);\n  var theme = useTheme(overridenTheme);\n  if (!theme.isV3) return React.createElement(MD2Surface, _extends({}, props, {\n    theme: theme,\n    style: style\n  }), children);\n  var colors = theme.colors;\n  var inputRange = [0, 1, 2, 3, 4, 5];\n  var backgroundColor = function () {\n    var _colors$elevation2;\n    if (isAnimatedValue(elevation)) {\n      return elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (elevation) {\n          var _colors$elevation;\n          return (_colors$elevation = colors.elevation) === null || _colors$elevation === void 0 ? void 0 : _colors$elevation[\"level\" + elevation];\n        })\n      });\n    }\n    return (_colors$elevation2 = colors.elevation) === null || _colors$elevation2 === void 0 ? void 0 : _colors$elevation2[\"level\" + elevation];\n  }();\n  if (Platform.OS === 'web') {\n    return React.createElement(Animated.View, _extends({}, props, {\n      testID: testID,\n      style: [{\n        backgroundColor: backgroundColor\n      }, elevation ? shadow(elevation, theme.isV3) : null, style]\n    }), children);\n  }\n  if (Platform.OS === 'android') {\n    var elevationLevel = [0, 3, 6, 9, 12, 15];\n    var getElevationAndroid = function getElevationAndroid() {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange: inputRange,\n          outputRange: elevationLevel\n        });\n      }\n      return elevationLevel[elevation];\n    };\n    var _ref4 = StyleSheet.flatten(style) || {},\n      margin = _ref4.margin,\n      padding = _ref4.padding,\n      transform = _ref4.transform,\n      borderRadius = _ref4.borderRadius;\n    var outerLayerStyles = {\n      margin: margin,\n      padding: padding,\n      transform: transform,\n      borderRadius: borderRadius\n    };\n    var _sharedStyle = [{\n      backgroundColor: backgroundColor\n    }, style];\n    return React.createElement(Animated.View, _extends({}, props, {\n      testID: testID,\n      style: [{\n        backgroundColor: backgroundColor,\n        transform: transform\n      }, outerLayerStyles, _sharedStyle, {\n        elevation: getElevationAndroid()\n      }]\n    }), children);\n  }\n  var iOSShadowOutputRanges = [{\n    shadowOpacity: 0.15,\n    height: [0, 1, 2, 4, 6, 8],\n    shadowRadius: [0, 3, 6, 8, 10, 12]\n  }, {\n    shadowOpacity: 0.3,\n    height: [0, 1, 1, 1, 2, 4],\n    shadowRadius: [0, 1, 2, 3, 3, 4]\n  }];\n  var shadowColor = '#000';\n  var _ref5 = StyleSheet.flatten(style) || {},\n    position = _ref5.position,\n    alignSelf = _ref5.alignSelf,\n    top = _ref5.top,\n    left = _ref5.left,\n    right = _ref5.right,\n    bottom = _ref5.bottom,\n    restStyle = _objectWithoutProperties(_ref5, _excluded3);\n  var absoluteStyles = {\n    position: position,\n    alignSelf: alignSelf,\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  var sharedStyle = [{\n    backgroundColor: backgroundColor\n  }, restStyle];\n  if (isAnimatedValue(elevation)) {\n    var _inputRange = [0, 1, 2, 3, 4, 5];\n    var getStyleForAnimatedShadowLayer = function getStyleForAnimatedShadowLayer(layer) {\n      return {\n        shadowColor: shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp'\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange: _inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height\n          })\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange: _inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius\n        })\n      };\n    };\n    return React.createElement(Animated.View, {\n      style: [getStyleForAnimatedShadowLayer(0), absoluteStyles]\n    }, React.createElement(Animated.View, {\n      style: getStyleForAnimatedShadowLayer(1)\n    }, React.createElement(Animated.View, _extends({}, props, {\n      testID: testID,\n      style: sharedStyle\n    }), children)));\n  }\n  var getStyleForShadowLayer = function getStyleForShadowLayer(layer) {\n    return {\n      shadowColor: shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation]\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]\n    };\n  };\n  return React.createElement(Animated.View, {\n    style: [getStyleForShadowLayer(0), absoluteStyles]\n  }, React.createElement(Animated.View, {\n    style: [getStyleForShadowLayer(1)]\n  }, React.createElement(Animated.View, _extends({}, props, {\n    testID: testID,\n    style: sharedStyle\n  }), children)));\n};\nexport default Surface;","map":{"version":3,"mappings":"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","names":["React","shadow","useTheme","overlay","isAnimatedValue","MD2Surface","_ref","style","overrideTheme","theme","rest","StyleSheet","flatten","elevation","isDarkTheme","dark","mode","colors","Animated","View","backgroundColor","surface","Surface","_ref2","children","overridenTheme","testID","props","isV3","inputRange","interpolate","outputRange","map","_colors$elevation","_colors$elevation2","Platform","OS","elevationLevel","getElevationAndroid","margin","padding","transform","borderRadius","outerLayerStyles","sharedStyle","iOSShadowOutputRanges","shadowOpacity","height","shadowRadius","shadowColor","position","alignSelf","top","left","right","bottom","restStyle","absoluteStyles","getStyleForAnimatedShadowLayer","layer","extrapolate","shadowOffset","width","getStyleForShadowLayer"],"sources":["Surface.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport shadow from '../styles/shadow';\nimport { useTheme } from '../core/theming';\nimport overlay, { isAnimatedValue } from '../styles/overlay';\nimport type { MD3Elevation, Theme } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes shadows and background on iOS and Android.\n   * Used to create UI hierarchy between components.\n   *\n   * Note: In version 2 the `elevation` prop was accepted via `style` prop i.e. `style={{ elevation: 4 }}`.\n   * It's no longer supported with theme version 3 and you should use `elevation` property instead.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst MD2Surface = ({\n  style,\n  theme: overrideTheme,\n  ...rest\n}: Omit<Props, 'elevation'>) => {\n  const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const { dark: isDarkTheme, mode, colors } = useTheme(overrideTheme);\n\n  return (\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors?.surface)\n              : colors?.surface,\n        },\n        elevation ? shadow(elevation) : null,\n        style,\n      ]}\n    />\n  );\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-android.png\" />\n *     <figcaption>Surface on Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-ios.png\" />\n *     <figcaption>Surface on iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface} elevation={4}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *   },\n * });\n * ```\n */\nconst Surface = ({\n  elevation = 1,\n  children,\n  theme: overridenTheme,\n  style,\n  testID,\n  ...props\n}: Props) => {\n  const theme = useTheme(overridenTheme);\n\n  if (!theme.isV3)\n    return (\n      <MD2Surface {...props} theme={theme} style={style}>\n        {children}\n      </MD2Surface>\n    );\n\n  const { colors } = theme;\n\n  const inputRange = [0, 1, 2, 3, 4, 5];\n\n  const backgroundColor = (() => {\n    if (isAnimatedValue(elevation)) {\n      return elevation.interpolate({\n        inputRange,\n        outputRange: inputRange.map((elevation) => {\n          return colors.elevation?.[`level${elevation as MD3Elevation}`];\n        }),\n      });\n    }\n\n    return colors.elevation?.[`level${elevation}`];\n  })();\n\n  if (Platform.OS === 'web') {\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          { backgroundColor },\n          elevation ? shadow(elevation, theme.isV3) : null,\n          style,\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  if (Platform.OS === 'android') {\n    const elevationLevel = [0, 3, 6, 9, 12, 15];\n\n    const getElevationAndroid = () => {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange,\n          outputRange: elevationLevel,\n        });\n      }\n\n      return elevationLevel[elevation];\n    };\n\n    const { margin, padding, transform, borderRadius } = (StyleSheet.flatten(\n      style\n    ) || {}) as ViewStyle;\n\n    const outerLayerStyles = { margin, padding, transform, borderRadius };\n    const sharedStyle = [{ backgroundColor }, style];\n\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          {\n            backgroundColor,\n            transform,\n          },\n          outerLayerStyles,\n          sharedStyle,\n          {\n            elevation: getElevationAndroid(),\n          },\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  const iOSShadowOutputRanges = [\n    {\n      shadowOpacity: 0.15,\n      height: [0, 1, 2, 4, 6, 8],\n      shadowRadius: [0, 3, 6, 8, 10, 12],\n    },\n    {\n      shadowOpacity: 0.3,\n      height: [0, 1, 1, 1, 2, 4],\n      shadowRadius: [0, 1, 2, 3, 3, 4],\n    },\n  ];\n\n  const shadowColor = '#000';\n\n  const { position, alignSelf, top, left, right, bottom, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const absoluteStyles = { position, alignSelf, top, right, bottom, left };\n  const sharedStyle = [{ backgroundColor }, restStyle];\n\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 4, 5];\n\n    const getStyleForAnimatedShadowLayer = (layer: 0 | 1) => {\n      return {\n        shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp',\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height,\n          }),\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius,\n        }),\n      };\n    };\n\n    return (\n      <Animated.View\n        style={[getStyleForAnimatedShadowLayer(0), absoluteStyles]}\n      >\n        <Animated.View style={getStyleForAnimatedShadowLayer(1)}>\n          <Animated.View {...props} testID={testID} style={sharedStyle}>\n            {children}\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n    );\n  }\n\n  const getStyleForShadowLayer = (layer: 0 | 1) => {\n    return {\n      shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation],\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation],\n    };\n  };\n\n  return (\n    <Animated.View style={[getStyleForShadowLayer(0), absoluteStyles]}>\n      <Animated.View style={[getStyleForShadowLayer(1)]}>\n        <Animated.View {...props} testID={testID} style={sharedStyle}>\n          {children}\n        </Animated.View>\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}