{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { List, Text, TextInput } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport { useContext, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AppContext } from \"../scripts/AppContext\";\nimport { broadcastTextMessage, onTextMessageReceive } from \"../scripts/Socket\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Home() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    textMessage = _useState2[0],\n    setTextMessage = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messagesList = _useState4[0],\n    setMessagesList = _useState4[1];\n  var appContext = useContext(AppContext);\n  var onSubmitTextMessage = function onSubmitTextMessage() {\n    setTextMessage(\"\");\n    broadcastTextMessage({\n      id: uuidv4(),\n      message: textMessage,\n      user: appContext.clientId,\n      timestamp: new Date().getTime(),\n      timezoneOffset: new Date().getTimezoneOffset()\n    });\n  };\n  onTextMessageReceive(function (m) {\n    var messagesIds = messagesList.map(function (a) {\n      return a.id;\n    });\n    var confirmingMessage = messagesIds.find(m.id);\n    if (m.user === appContext.clientId && confirmingMessage !== undefined) {\n      var newMessagesList = messagesList;\n      newMessagesList[messagesIds.indexOf(m.id)] = _objectSpread(_objectSpread({}, confirmingMessage), {}, {\n        sent: true\n      });\n      setMessagesList(newMessagesList);\n    } else {\n      var newMsg = _objectSpread(_objectSpread({}, m), {}, {\n        sent: true\n      });\n      setMessagesList(_objectSpread(_objectSpread({}, messagesList), {}, {\n        newMsg: newMsg\n      }));\n    }\n  });\n  console.log(appContext.themes.current());\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      style: {\n        margin: 10\n      },\n      value: textMessage,\n      label: \"Enter Message to broadcast!\",\n      onChangeText: setTextMessage,\n      onSubmitEditing: onSubmitTextMessage\n    }), _jsx(List.Item, {\n      title: \"Hello World\",\n      description: \"This is a message\",\n      left: function left() {\n        return _jsx(List.Icon, {\n          icon: \"message\",\n          color: appContext.themes.current().colors.background\n        });\n      }\n    })]\n  });\n}","map":{"version":3,"names":["List","Text","TextInput","useContext","useState","v4","uuidv4","AppContext","broadcastTextMessage","onTextMessageReceive","Home","textMessage","setTextMessage","messagesList","setMessagesList","appContext","onSubmitTextMessage","id","message","user","clientId","timestamp","Date","getTime","timezoneOffset","getTimezoneOffset","m","messagesIds","map","a","confirmingMessage","find","undefined","newMessagesList","indexOf","sent","newMsg","console","log","themes","current","margin","colors","background"],"sources":["E:/_Data/ThomasCattGithub/ChessMultiplayer/frontend/assets/views/Messaging.js"],"sourcesContent":["import { List, Text, TextInput } from 'react-native-paper';\r\nimport { View } from 'react-native';\r\nimport { useContext, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { AppContext } from '../scripts/AppContext'\r\nimport { broadcastTextMessage, onTextMessageReceive } from '../scripts/Socket'\r\n\r\nexport default function Home() {\r\n    const [textMessage, setTextMessage] = useState(\"\")\r\n    const [messagesList, setMessagesList] = useState([])\r\n\tconst appContext = useContext(AppContext)\r\n\r\n    const onSubmitTextMessage = () => {\r\n        setTextMessage(\"\")\r\n        broadcastTextMessage({\r\n            id: uuidv4(),\r\n            message: textMessage,\r\n            user: appContext.clientId,\r\n            timestamp: new Date().getTime(),\r\n            timezoneOffset: new Date().getTimezoneOffset()\r\n        })\r\n    }\r\n\r\n    onTextMessageReceive((m) => {\r\n        const messagesIds = messagesList.map(a => a.id)\r\n        const confirmingMessage = messagesIds.find(m.id)\r\n        if ((m.user === appContext.clientId) && (confirmingMessage !== undefined)) {\r\n            let newMessagesList = messagesList\r\n            newMessagesList[messagesIds.indexOf(m.id)] = {...confirmingMessage, sent: true}\r\n            setMessagesList(newMessagesList)\r\n        } else {\r\n            const newMsg = {...m, sent: true}\r\n            setMessagesList({...messagesList, newMsg})\r\n        }\r\n    })\r\n\r\n    console.log(appContext.themes.current())\r\n\r\n    return <View>\r\n        <TextInput style={{\r\n            margin: 10,\r\n        }} value={textMessage} label={\"Enter Message to broadcast!\"} onChangeText={setTextMessage} onSubmitEditing={onSubmitTextMessage}/>\r\n        <List.Item\r\n            title=\"Hello World\"\r\n            description=\"This is a message\"\r\n            left={() => <List.Icon icon={\"message\"} color={appContext.themes.current().colors.background} />}\r\n        />\r\n    </View>\r\n}"],"mappings":";;;;AAAA,SAASA,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAE3D,SAASC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,UAAU;AACnB,SAASC,oBAAoB,EAAEC,oBAAoB;AAA2B;AAAA;AAE9E,eAAe,SAASC,IAAI,GAAG;EAC3B,gBAAsCN,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CO,WAAW;IAAEC,cAAc;EAClC,iBAAwCR,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA7CS,YAAY;IAAEC,eAAe;EACvC,IAAMC,UAAU,GAAGZ,UAAU,CAACI,UAAU,CAAC;EAEtC,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAmB,GAAS;IAC9BJ,cAAc,CAAC,EAAE,CAAC;IAClBJ,oBAAoB,CAAC;MACjBS,EAAE,EAAEX,MAAM,EAAE;MACZY,OAAO,EAAEP,WAAW;MACpBQ,IAAI,EAAEJ,UAAU,CAACK,QAAQ;MACzBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;MAC/BC,cAAc,EAAE,IAAIF,IAAI,EAAE,CAACG,iBAAiB;IAChD,CAAC,CAAC;EACN,CAAC;EAEDhB,oBAAoB,CAAC,UAACiB,CAAC,EAAK;IACxB,IAAMC,WAAW,GAAGd,YAAY,CAACe,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACZ,EAAE;IAAA,EAAC;IAC/C,IAAMa,iBAAiB,GAAGH,WAAW,CAACI,IAAI,CAACL,CAAC,CAACT,EAAE,CAAC;IAChD,IAAKS,CAAC,CAACP,IAAI,KAAKJ,UAAU,CAACK,QAAQ,IAAMU,iBAAiB,KAAKE,SAAU,EAAE;MACvE,IAAIC,eAAe,GAAGpB,YAAY;MAClCoB,eAAe,CAACN,WAAW,CAACO,OAAO,CAACR,CAAC,CAACT,EAAE,CAAC,CAAC,mCAAOa,iBAAiB;QAAEK,IAAI,EAAE;MAAI,EAAC;MAC/ErB,eAAe,CAACmB,eAAe,CAAC;IACpC,CAAC,MAAM;MACH,IAAMG,MAAM,mCAAOV,CAAC;QAAES,IAAI,EAAE;MAAI,EAAC;MACjCrB,eAAe,iCAAKD,YAAY;QAAEuB,MAAM,EAANA;MAAM,GAAE;IAC9C;EACJ,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAACvB,UAAU,CAACwB,MAAM,CAACC,OAAO,EAAE,CAAC;EAExC,OAAO,MAAC,IAAI;IAAA,WACR,KAAC,SAAS;MAAC,KAAK,EAAE;QACdC,MAAM,EAAE;MACZ,CAAE;MAAC,KAAK,EAAE9B,WAAY;MAAC,KAAK,EAAE,6BAA8B;MAAC,YAAY,EAAEC,cAAe;MAAC,eAAe,EAAEI;IAAoB,EAAE,EAClI,KAAC,IAAI,CAAC,IAAI;MACN,KAAK,EAAC,aAAa;MACnB,WAAW,EAAC,mBAAmB;MAC/B,IAAI,EAAE;QAAA,OAAM,KAAC,IAAI,CAAC,IAAI;UAAC,IAAI,EAAE,SAAU;UAAC,KAAK,EAAED,UAAU,CAACwB,MAAM,CAACC,OAAO,EAAE,CAACE,MAAM,CAACC;QAAW,EAAG;MAAA;IAAC,EACnG;EAAA,EACC;AACX"},"metadata":{},"sourceType":"module"}