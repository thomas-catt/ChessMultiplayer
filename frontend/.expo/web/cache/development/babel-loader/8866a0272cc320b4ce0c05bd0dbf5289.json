{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"leftInset\", \"horizontalInset\", \"style\", \"theme\", \"bold\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/themes/v2/colors\";\n\nvar Divider = function Divider(_ref) {\n  var leftInset = _ref.leftInset,\n    _ref$horizontalInset = _ref.horizontalInset,\n    horizontalInset = _ref$horizontalInset === void 0 ? false : _ref$horizontalInset,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$bold = _ref.bold,\n    bold = _ref$bold === void 0 ? false : _ref$bold,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isDarkTheme = theme.dark,\n    isV3 = theme.isV3;\n  var dividerColor = isV3 ? theme.colors.surfaceVariant : color(isDarkTheme ? white : black).alpha(0.12).rgb().string();\n  return React.createElement(View, _extends({}, rest, {\n    style: [{\n      height: StyleSheet.hairlineWidth,\n      backgroundColor: dividerColor\n    }, leftInset && styles.leftInset, isV3 && horizontalInset && styles.horizontalInset, isV3 && bold && styles.bold, style]\n  }));\n};\nvar styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28\n  },\n  bold: {\n    height: 1\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAEA,SAASC,SAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;;AAqDA,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAGC,MAOH;EAAA,IANXC,SADe,GAOJD,KANXC,SADe;IAAA,uBAOJD,KALXE,eAAe;IAAfA,eAAe,qCAAG,KAFH;IAGfC,KAHe,GAOJH,KAJXG,KAHe;IAIfC,KAJe,GAOJJ,KAHXI,KAJe;IAAA,YAOJJ,KAFXK,IAAI;IAAJA,IAAI,0BAAG,KALQ;IAMZC,gCACQN;EACX,IAAcO,WAAR,GAA8BH,KAApC,CAAQI,IAAI;IAAeC,OAASL,KAApC,CAA2BK;EAE3B,IAAMC,YAAY,GAAGD,IAAI,GACrBL,KAAK,CAACO,MAAN,CAAaC,cADQ,GAErBjB,KAAK,CAACY,WAAW,GAAGT,KAAH,GAAWD,KAAvB,CAAL,CACGgB,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;EAOA,OACErB,oBAACsB,IAAD,eACMV,IADN;IAEEH,KAAK,EAAE,CACL;MAAEc,MAAM,EAAEC,UAAU,CAACC,aAArB;MAAoCC,eAAe,EAAEV;IAArD,CADK,EAELT,SAAS,IAAIoB,MAAM,CAACpB,SAFf,EAGLQ,IAAI,IAAIP,eAAR,IAA2BmB,MAAM,CAACnB,eAH7B,EAILO,IAAI,IAAIJ,IAAR,IAAgBgB,MAAM,CAAChB,IAJlB,EAKLF,KALK;EAFT,GADF;AAYD,CA7BD;AA+BA,IAAMkB,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkB;EAC/BrB,SAAS,EAAE;IACTsB,UAAU,EAAE;EADH,CADoB;EAI/BrB,eAAe,EAAE;IACfqB,UAAU,EAAE,EADG;IAEfC,WAAW,EAAE;EAFE,CAJc;EAQ/BnB,IAAI,EAAE;IACJY,MAAM,EAAE;EADJ;AARyB,CAAlB,CAAf;AAaA,eAAerB,SAAS,CAACG,OAAD,CAAxB","names":["React","color","withTheme","black","white","Divider","_ref","leftInset","horizontalInset","style","theme","bold","rest","isDarkTheme","dark","isV3","dividerColor","colors","surfaceVariant","alpha","rgb","string","View","height","StyleSheet","hairlineWidth","backgroundColor","styles","create","marginLeft","marginRight"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { $RemoveChildren, Theme } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * @renamed Renamed from 'inset' to 'leftInset` in v5.x\n   * Whether divider has a left inset.\n   */\n  leftInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider has a horizontal inset on both sides.\n   */\n  horizontalInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider should be bolded.\n   */\n  bold?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({\n  leftInset,\n  horizontalInset = false,\n  style,\n  theme,\n  bold = false,\n  ...rest\n}: Props) => {\n  const { dark: isDarkTheme, isV3 } = theme;\n\n  const dividerColor = isV3\n    ? theme.colors.surfaceVariant\n    : color(isDarkTheme ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n\n  return (\n    <View\n      {...rest}\n      style={[\n        { height: StyleSheet.hairlineWidth, backgroundColor: dividerColor },\n        leftInset && styles.leftInset,\n        isV3 && horizontalInset && styles.horizontalInset,\n        isV3 && bold && styles.bold,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72,\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28,\n  },\n  bold: {\n    height: 1,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}