{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"showSelectedOverlay\", \"ellipsizeMode\", \"compact\", \"elevated\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"../Icon\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Surface from \"../Surface\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport { getChipColors } from \"./helpers\";\n\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    selectedColor = _ref.selectedColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var _React$useRef = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = getChipColors({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    underlayColor = _getChipColors.underlayColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = _objectSpread({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"mappings":"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","names":["React","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","white","getChipColors","Chip","_ref","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","showSelectedOverlay","ellipsizeMode","compact","elevated","rest","isV3","useRef","Animated","Value","elevation","current","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","StyleSheet","flatten","customBackgroundColor","backgroundColor","borderRadius","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","accessibilityState","elevationStyle","Platform","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","color","fonts","labelLarge","regular","styles","container","md3OutlineContainer","md3FlatContainer","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityRole","View","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","TouchableWithoutFeedback","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, Theme } from '../../types';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          isV3 &&\n            (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n          !theme.isV3 && {\n            elevation: elevationStyle,\n          },\n          {\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}